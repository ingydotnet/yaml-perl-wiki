=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.39.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Unicode Issues in Perl5's YAML Implementations

This document aims to define how YAML, Perl5 and Unicode play together. Perl5
has 4 primary YAML implementations (C<YAML.pm>, C<YAML::XS>, C<YAML::Syck>,
C<YAML::Tiny>) and they each handle Unicode issues differently.

=head1 Scope / Concerns of the Problem

There are several categories of concerns to be aware of.

=head2 YAML Stack and Transforms

YAML information travels up and down a stack into different states. A
I<transform> is a function that moves information from one state to another.
The YAML Stack looks like this:

      Load Trans  State  Dump Trans

                  / File \                Disk encoding
             Read          Write
                  >Stream<                Perl scalar/string
              Lex          (Paint?)
                  >Token <                Pieces of Stream
            Parse          Emit
                  >Event <                (ie START_MAP, SCALAR, etc)
          Compose          Decompose
                  >Graph <                Generic AST
        Construct          Deconstruct
                  \Object/                Native Perl data

In terms of Unicode we only care about 2 states and 4 transforms:

=over

=item File

The state of a YAML stream as it exists outside a program (usually a
disk file).

=item Stream

The state of a YAML stream as it exists in a Perl scalar (string).

=item Read

Transform File to Stream.

=item Write

Transform Stream to File.

=item Lex (+ Parse)

Transform Stream to Event.

=item Emit (+ Paint)

Transform Event to Stream.

=back

=head2 Unicode and Encodings

The YAML (and JSON) specs say that a YAML stream must be a series of Unicode
Characters.

They also define the encodings the should be used: UTF8, UTF16 and UTF32.
These encodings should really only be relevant to the File state, but in
practice they have concerns in the Stream state. The specs support BOMs to
indicate the encoding in use (for a File state).

=head2 YAML and JSON

We want to make decisions that are similar across all Perl JSON
implementations (in addition to all Perl YAML implementations).

=head2 Perl Scalar States

Perl does not shield programmers from Unicode issues very well. A Perl5 scalar
can be in many states. We need to not only define which states are valid for a
Stream, but also the YAML::* APIs (Load/Dump).

=head2 Perl YAML API

We want to make these decisions within the current, simple YAML API calls:

=over

=item * C<Load>

=item * C<LoadFile>

=item * C<Dump>

=item * C<DumpFile>

=back

In the future, fancier APIs may allow more fine grained control, but for now
we just want to normalize the normal usage across implementation variants.

=head2 Performance

Some special cases exist that might cause poor performance if implemented
using generic rules.

For instance, if a libyaml expects a utf8 encoding stream and a file on disk
is already in this form, it should be able to use that data unverified by a
Perl layer.

=head1 Implementation Decisions

This section will list the actual decisions that are being made.

=head2 Encodings and States

=over

=item The File state is always UTF8

This only means that we don't LoadFile or DumpFile in any encoding
besides UTF8.

The YAML and JSON spec both want stuff to be encoded in UTF* on disk (and they
both heavily encourage UTF8). Even though this feels unnecessary (since
Unicode is just a series of code points and the disk encoding shouldn't
matter) we can make the decision that our modules only deal with UTF8 at the
File state.

This means that LoadFile looks like this:

    open my $in, "<:utf8", $yaml_file_path;
    return $self->load(<$in>);

And DumpFile looks like this:

    open my $out, ">:utf8", $yaml_file_path;
    print $out $self->dump(<$yaml>);

=back

We can either choose the C<:utf8> (non-validating) layer or the C<:encoding(UTF-
8)> (validating) layer. (Undecided at this point).

=over

=item The Stream state is a UTF8 decoded string

This one is more difficult because it very much effects the way people use
YAML::* in their code. We need to define what happens in these code examples:

    Load('{name: "Ingy d\x{F6}t Net"}');
    Load('{name: "Ingy dÃ¶t Net"}');
    Load($big5_encoded_yaml_string);
    Load(io->file($path)->slurp);       # Data read from disk as bytes
    # Many more needed

    $yaml = Dump($object);              # What form is `$yaml` in?
                                        # It will affect subsequent operations.

There are some open questions:

=over

=item * How does C<use utf8;> affect things?

=back

We will should write a test file of all these concerns and run it against all
the implementations.

=back

=head1 Current State of Implementations

This section details where each of the YAML implementations stands.

=head2 C<YAML.pm>

=head2 C<YAML::XS>

=head2 C<YAML::Tiny>

=head2 C<YAML::Syck>

=cut
